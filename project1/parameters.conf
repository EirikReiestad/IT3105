[DEFAULT]
#1. The plant to simulate: bathtub (0), Cournot competition (1), your additional model (2), etc.
plant=2
#2. The controller to use: classic (0) or AI-based (1)
controller=0
# Bonus: PID initialization values. Not having 3 values in the PID array, the controller will run with its default values.
pid = [0.5, 0.5, 0.3]
#3. Number of layers and number of neurons in each layer of the neural network. Your system should handle anywhere between 0 and 5 hidden layers.
hidden_layers=[10, 10, 10, 10, 10]
#4. Activation function used for each layer of the neural network. Your system must include at least Sigmoid (0), Tanh (1) and RELU (2).
activation_func=[1, 1, 1, 1, 1]
#5. Range of acceptable initial values for each weight and bias in the neural network.
max_val=1
min_val=0
#6. Number of training epochs
epochs=10
#7. Number of simulation timesteps of the CONSYS per epoch
sim_timesteps=100
#8. Learning rate for tuning the controller parameters, whether classic PID or neural-net-based.
learning_rate=0.3
#9. Range of acceptable values for noise / disturbance (D).
max_noise=0.01
min_noise=-0.01
#10. Cross-sectional area (A) of the bathtub
area_bathtub=50
#11. Cross-sectional area (C) of the bathtub’s drain.
area_bathtub_drain=0.5
#12. Initial height (H0) of the bathtub water.
init_height_bathtub=10

[PLANT1_PID]
#1. The plant to simulate: bathtub (0), Cournot competition (1), your additional model (2), etc.
plant=0
#2. The controller to use: classic (0) or AI-based (1)
controller=0
# Bonus: PID initialization values. Not having 3 values in the PID array, the controller will run with its default values.
pid = [1.0, 1.0, 0.3]
#6. Number of training epochs
epochs=30
#7. Number of simulation timesteps of the CONSYS per epoch
sim_timesteps=100
#8. Learning rate for tuning the controller parameters, whether classic PID or neural-net-based.
learning_rate=0.3
#9. Range of acceptable values for noise / disturbance (D).
max_noise=0.01
min_noise=-0.01
#10. Cross-sectional area (A) of the bathtub
area_bathtub=50
#11. Cross-sectional area (C) of the bathtub’s drain.
area_bathtub_drain=0.5
#12. Initial height (H0) of the bathtub water.
init_height_bathtub=10

[PLANT1_NN]
#1. The plant to simulate: bathtub (0), Cournot competition (1), your additional model (2), etc.
plant=0
#2. The controller to use: classic (0) or AI-based (1)
controller=1
# Bonus: PID initialization values. Not having 3 values in the PID array, the controller will run with its default values.
#3. Number of layers and number of neurons in each layer of the neural network. Your system should handle anywhere between 0 and 5 hidden layers.
hidden_layers=[4, 3, 2]
#4. Activation function used for each layer of the neural network. Your system must include at least Sigmoid (0), Tanh (1) and RELU (2).
activation_func=[0, 1, 2]
#5. Range of acceptable initial values for each weight and bias in the neural network.
max_val=1
min_val=0
#6. Number of training epochs
epochs=10
#7. Number of simulation timesteps of the CONSYS per epoch
sim_timesteps=100
#8. Learning rate for tuning the controller parameters, whether classic PID or neural-net-based.
learning_rate=0.3
#9. Range of acceptable values for noise / disturbance (D).
max_noise=0.01
min_noise=-0.01
#10. Cross-sectional area (A) of the bathtub
area_bathtub=50
#11. Cross-sectional area (C) of the bathtub’s drain.
area_bathtub_drain=0.5
#12. Initial height (H0) of the bathtub water.
init_height_bathtub=10

[PLANT2_PID]
#1. The plant to simulate: bathtub (0), Cournot competition (1), your additional model (2), etc.
plant=1
#2. The controller to use: classic (0) or AI-based (1)
controller=0
# Bonus: PID initialization values. Not having 3 values in the PID array, the controller will run with its default values.
pid = [0.1, 0.1, 0.3]
#6. Number of training epochs
epochs=30
#7. Number of simulation timesteps of the CONSYS per epoch
sim_timesteps=100
#8. Learning rate for tuning the controller parameters, whether classic PID or neural-net-based.
learning_rate=0.1
#9. Range of acceptable values for noise / disturbance (D).
max_noise=0.01
min_noise=-0.01
#13. The maximum price (pmax) for Cournot competition.
max_price_cournot=2.5
#14. The marginal cost (cm) for Cournot competition.
marg_cost_cournot=0.1
#15. Goal profit for Cournot competition.
goal_profit=0.6

[PLANT2_NN] # TODO
#1. The plant to simulate: bathtub (0), Cournot competition (1), your additional model (2), etc.
plant=1
#2. The controller to use: classic (0) or AI-based (1)
controller=1
#3. Number of layers and number of neurons in each layer of the neural network. Your system should handle anywhere between 0 and 5 hidden layers.
hidden_layers=[4, 3, 2]
#4. Activation function used for each layer of the neural network. Your system must include at least Sigmoid (0), Tanh (1) and RELU (2).
activation_func=[2, 2, 2]
#5. Range of acceptable initial values for each weight and bias in the neural network.
max_val=1
min_val=0
#6. Number of training epochs
epochs=10
#7. Number of simulation timesteps of the CONSYS per epoch
sim_timesteps=200
#8. Learning rate for tuning the controller parameters, whether classic PID or neural-net-based.
learning_rate=0.3
#9. Range of acceptable values for noise / disturbance (D).
max_noise=0.0
min_noise=-0.0
#13. The maximum price (pmax) for Cournot competition.
max_price_cournot=2.5
#14. The marginal cost (cm) for Cournot competition.
marg_cost_cournot=0.1
#15. Goal profit for Cournot competition.
goal_profit=0.6

[PLANT3_PID]
#1. The plant to simulate: bathtub (0), Cournot competition (1), your additional model (2), etc.
plant=2
#2. The controller to use: classic (0) or AI-based (1)
controller=0
# Bonus: PID initialization values. Not having 3 values in the PID array, the controller will run with its default values.
pid = [0.5, 0.5, 0.3]
#6. Number of training epochs
epochs=30
#7. Number of simulation timesteps of the CONSYS per epoch
sim_timesteps=100
#8. Learning rate for tuning the controller parameters, whether classic PID or neural-net-based.
learning_rate=0.3
#9. Range of acceptable values for noise / disturbance (D).
max_noise=0.01
min_noise=-0.01
#16. Initial population for population growth modelling.
init_population=1
#17. Target population for population growth modelling.
target_population=1.5

[PLANT3_NN] #TODO
#1. The plant to simulate: bathtub (0), Cournot competition (1), your additional model (2), etc.
plant=2
#2. The controller to use: classic (0) or AI-based (1)
controller=1
# Bonus: PID initialization values. Not having 3 values in the PID array, the controller will run with its default values.
#3. Number of layers and number of neurons in each layer of the neural network. Your system should handle anywhere between 0 and 5 hidden layers.
hidden_layers=[4, 3, 2]
#4. Activation function used for each layer of the neural network. Your system must include at least Sigmoid (0), Tanh (1) and RELU (2).
activation_func=[0, 1, 2]
#5. Range of acceptable initial values for each weight and bias in the neural network.
max_val=1
min_val=0
#6. Number of training epochs
epochs=10
#7. Number of simulation timesteps of the CONSYS per epoch
sim_timesteps=100
#8. Learning rate for tuning the controller parameters, whether classic PID or neural-net-based.
learning_rate=0.3
#9. Range of acceptable values for noise / disturbance (D).
max_noise=0.0
min_noise=-0.0
#16. Initial population for population growth modelling.
init_population=1
#17. Target population for population growth modelling.
target_population=1.5
